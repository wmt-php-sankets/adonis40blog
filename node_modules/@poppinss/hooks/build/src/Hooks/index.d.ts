import { IocResolverContract } from '@adonisjs/fold';
declare type HooksHandler = (...args: any[]) => void | Promise<void>;
/**
 * Exposes the API to register before/after lifecycle hooks for a given action
 * with option to resolve handlers from the IoC container.
 *
 * The hooks class doesn't provide autocomplete for actions and the arguments
 * the handler will receive, since we expect this class to be used internally
 * for user facing objects.
 */
export declare class Hooks {
    private resolver?;
    private hooks;
    constructor(resolver?: IocResolverContract | undefined);
    /**
     * Raise exceptins when resolver is not defined
     */
    private ensureResolver;
    /**
     * Resolves the hook handler using the resolver when it is defined as string
     * or returns the function reference back
     */
    private resolveHandler;
    /**
     * Returns a boolean whether a handler has been already registered or not
     */
    has(lifecycle: 'before' | 'after', action: string, handler: HooksHandler | string): boolean;
    /**
     * Register hook handler for a given event and lifecycle
     */
    add(lifecycle: 'before' | 'after', action: string, handler: HooksHandler | string): this;
    /**
     * Remove a pre-registered handler
     */
    remove(lifecycle: 'before' | 'after', action: string, handler: HooksHandler | string): void;
    /**
     * Remove a pre-registered handler
     */
    clear(lifecycle: 'before' | 'after', action?: string): void;
    /**
     * Executes the hook handler for a given action and lifecycle
     */
    exec(lifecycle: 'before' | 'after', action: string, ...data: any[]): Promise<void>;
}
export {};
