"use strict";
/*
 * @adonisjs/lucid
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Schema_1 = require("../src/Schema");
const Database_1 = require("../src/Database");
const Adapter_1 = require("../src/Orm/Adapter");
const Config_1 = require("../src/Orm/Config");
const BaseModel_1 = require("../src/Orm/BaseModel");
const Validator_1 = require("../src/Bindings/Validator");
const scope_1 = require("../src/Helpers/scope");
const decorators = __importStar(require("../src/Orm/Decorators"));
/**
 * Database service provider
 */
class DatabaseServiceProvider {
    constructor($container) {
        this.$container = $container;
    }
    /**
     * Register the database binding
     */
    registerDatabase() {
        this.$container.singleton('Adonis/Lucid/Database', () => {
            const config = this.$container.use('Adonis/Core/Config').get('database', {});
            const Logger = this.$container.use('Adonis/Core/Logger');
            const Profiler = this.$container.use('Adonis/Core/Profiler');
            const Emitter = this.$container.use('Adonis/Core/Event');
            return new Database_1.Database(config, Logger, Profiler, Emitter);
        });
    }
    /**
     * Registers ORM
     */
    registerOrm() {
        this.$container.singleton('Adonis/Lucid/Orm', () => {
            const config = this.$container.use('Adonis/Core/Config').get('database.orm', {});
            /**
             * Attaching adapter to the base model. Each model is allowed to define
             * a different adapter.
             */
            BaseModel_1.BaseModel.$adapter = new Adapter_1.Adapter(this.$container.use('Adonis/Lucid/Database'));
            BaseModel_1.BaseModel.$container = this.$container;
            BaseModel_1.BaseModel.$configurator = Object.assign({}, Config_1.Config, config);
            return {
                BaseModel: BaseModel_1.BaseModel,
                scope: scope_1.scope,
                ...decorators,
            };
        });
    }
    /**
     * Registers schema class
     */
    registerSchema() {
        this.$container.singleton('Adonis/Lucid/Schema', () => {
            return Schema_1.Schema;
        });
    }
    /**
     * Registers the health checker
     */
    registerHealthChecker() {
        this.$container.with(['Adonis/Core/HealthCheck', 'Adonis/Lucid/Database'], (HealthCheck, Db) => {
            if (Db.hasHealthChecksEnabled) {
                HealthCheck.addChecker('lucid', 'Adonis/Lucid/Database');
            }
        });
    }
    /**
     * Extends the validator by defining validation rules
     */
    defineValidationRules() {
        this.$container.with(['Adonis/Core/Validator', 'Adonis/Lucid/Database'], (Validator, Db) => {
            Validator_1.extendValidator(Validator.validator, Db);
        });
    }
    /**
     * Called when registering providers
     */
    register() {
        this.registerDatabase();
        this.registerOrm();
        this.registerSchema();
    }
    /**
     * Called when all bindings are in place
     */
    boot() {
        this.registerHealthChecker();
        this.defineValidationRules();
    }
}
exports.default = DatabaseServiceProvider;
