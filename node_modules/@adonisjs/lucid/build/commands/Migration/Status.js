"use strict";
/*
 * @adonisjs/lucid
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cli_table3_1 = __importDefault(require("cli-table3"));
const fold_1 = require("@adonisjs/fold");
const ace_1 = require("@adonisjs/ace");
const Base_1 = __importDefault(require("./Base"));
/**
 * The command is meant to migrate the database by execute migrations
 * in `up` direction.
 */
let Status = /** @class */ (() => {
    let Status = class Status extends Base_1.default {
        constructor(app, kernel, db) {
            super(app, kernel);
            this.db = db;
        }
        /**
         * Colorizes the status string
         */
        colorizeStatus(status) {
            switch (status) {
                case 'pending':
                    return this.colors.yellow('pending');
                case 'migrated':
                    return this.colors.green('completed');
                case 'corrupt':
                    return this.colors.red('corrupt');
            }
        }
        /**
         * Handle command
         */
        async handle() {
            this.connection = this.connection || this.db.primaryConnectionName;
            const connection = this.db.getRawConnection(this.connection);
            /**
             * Ensure the define connection name does exists in the
             * config file
             */
            if (!connection) {
                this.printNotAValidConnection(this.connection);
                return;
            }
            const { Migrator } = await Promise.resolve().then(() => __importStar(require('../../src/Migrator')));
            const migrator = new Migrator(this.db, this.application, {
                direction: 'up',
                connectionName: this.connection,
            });
            const list = await migrator.getList();
            await migrator.close();
            this.printPreviewMessage();
            const table = new cli_table3_1.default({
                head: ['Name', 'Status', 'Batch', 'Message'],
            });
            /**
             * Push a new row to the table
             */
            list.forEach((node) => {
                table.push([
                    node.name,
                    this.colorizeStatus(node.status),
                    node.batch || 'NA',
                    node.status === 'corrupt' ? 'The migration file is missing on filesystem' : '',
                ]);
            });
            console.log(table.toString());
        }
    };
    Status.commandName = 'migration:status';
    Status.description = 'Drop existing tables and re-run migrations from start';
    /**
     * This command loads the application, since we need the runtime
     * to find the migration directories for a given connection
     */
    Status.settings = {
        loadApp: true,
    };
    __decorate([
        ace_1.flags.string({ description: 'Define a custom database connection' }),
        __metadata("design:type", String)
    ], Status.prototype, "connection", void 0);
    Status = __decorate([
        fold_1.inject([null, null, 'Adonis/Lucid/Database']),
        __metadata("design:paramtypes", [Object, ace_1.Kernel, Object])
    ], Status);
    return Status;
})();
exports.default = Status;
