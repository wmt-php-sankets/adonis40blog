"use strict";
/*
 * @adonisjs/lucid
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseQueryBuilder = void 0;
const QueryBuilder_1 = require("../../QueryBuilder");
/**
 * Base query builder for ORM Relationships
 */
class BaseQueryBuilder extends QueryBuilder_1.ModelQueryBuilder {
    constructor(builder, client, relation, dbCallback) {
        super(builder, relation.relatedModel(), client, dbCallback);
        /**
         * A flag to know, if query builder is instantiated for
         * eager loading or not.
         */
        this.isEagerQuery = false;
    }
    /**
     * Returns the profiler action. Protected, since the class is extended
     * by relationships
     */
    getQueryData() {
        return Object.assign(this.toSQL(), {
            connection: this.client.connectionName,
            inTransaction: this.client.isTransaction,
            model: this.model.name,
            eagerLoading: this.isEagerQuery,
            relation: this.profilerData(),
        });
    }
    /**
     * Returns the name of the query action. Used mainly for
     * raising descriptive errors
     */
    queryAction() {
        let action = this.knexQuery['_method'];
        if (action === 'del') {
            action = 'delete';
        }
        if (action === 'select' && this.isEagerQuery) {
            action = 'preload';
        }
        return action;
    }
    /**
     * Selects the relation keys. Invoked by the preloader
     */
    selectRelationKeys() {
        const knexQuery = this.knexQuery;
        const columns = knexQuery['_statements'].find(({ grouping }) => grouping === 'columns');
        /**
         * No columns have been defined, we will let knex do it's job by
         * adding `select *`
         */
        if (!columns) {
            return this;
        }
        /**
         * Finally push relation columns to existing selected columns
         */
        this.getRelationKeys().forEach((key) => {
            key = this.resolveKey(key);
            if (!columns.value.includes(key)) {
                columns.value.push(key);
            }
        });
        return this;
    }
    /**
     * Get query sql
     */
    toSQL() {
        this.applyConstraints();
        return super.toSQL();
    }
    /**
     * Execute query
     */
    exec() {
        this.applyConstraints();
        return super.exec();
    }
}
exports.BaseQueryBuilder = BaseQueryBuilder;
