"use strict";
/*
 * @adonisjs/lucid
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.HasOneQueryClient = void 0;
const QueryBuilder_1 = require("./QueryBuilder");
const utils_1 = require("../../../utils");
/**
 * Query client for executing queries in scope to the defined
 * relationship
 */
class HasOneQueryClient {
    constructor(relation, parent, client) {
        this.relation = relation;
        this.parent = parent;
        this.client = client;
    }
    /**
     * Generate a related query builder
     */
    static query(client, relation, rows) {
        const query = new QueryBuilder_1.HasOneQueryBuilder(client.knexQuery(), client, rows, relation);
        typeof (relation.onQueryHook) === 'function' && relation.onQueryHook(query);
        return query;
    }
    /**
     * Generate a related eager query builder
     */
    static eagerQuery(client, relation, rows) {
        const query = new QueryBuilder_1.HasOneQueryBuilder(client.knexQuery(), client, rows, relation);
        query.isEagerQuery = true;
        typeof (relation.onQueryHook) === 'function' && relation.onQueryHook(query);
        return query;
    }
    /**
     * Returns value for the foreign key
     */
    getForeignKeyValue(parent, action) {
        return utils_1.getValue(parent, this.relation.localKey, this.relation, action);
    }
    /**
     * Returns instance of query builder
     */
    query() {
        return HasOneQueryClient.query(this.client, this.relation, this.parent);
    }
    /**
     * Save related model instance
     */
    async save(related) {
        await utils_1.managedTransaction(this.parent.$trx || this.client, async (trx) => {
            this.parent.$trx = trx;
            await this.parent.save();
            related[this.relation.foreignKey] = this.getForeignKeyValue(this.parent, 'save');
            related.$trx = trx;
            await related.save();
        });
    }
    /**
     * Create instance of the related model
     */
    async create(values) {
        const parent = this.parent;
        return utils_1.managedTransaction(this.parent.$trx || this.client, async (trx) => {
            this.parent.$trx = trx;
            await parent.save();
            return this.relation.relatedModel().create(Object.assign({
                [this.relation.foreignKey]: this.getForeignKeyValue(parent, 'create'),
            }, values), { client: trx });
        });
    }
    /**
     * Get the first matching related instance or create a new one
     */
    async firstOrCreate(search, savePayload) {
        return utils_1.managedTransaction(this.parent.$trx || this.client, async (trx) => {
            this.parent.$trx = trx;
            await this.parent.save();
            return this.relation.relatedModel().firstOrCreate(Object.assign({
                [this.relation.foreignKey]: this.getForeignKeyValue(this.parent, 'firstOrCreate'),
            }, search), savePayload, { client: trx });
        });
    }
    /**
     * Update the existing row or create a new one
     */
    async updateOrCreate(search, updatePayload) {
        return utils_1.managedTransaction(this.parent.$trx || this.client, async (trx) => {
            this.parent.$trx = trx;
            await this.parent.save();
            return this.relation.relatedModel().updateOrCreate(Object.assign({
                [this.relation.foreignKey]: this.getForeignKeyValue(this.parent, 'updateOrCreate'),
            }, search), updatePayload, { client: trx });
        });
    }
}
exports.HasOneQueryClient = HasOneQueryClient;
